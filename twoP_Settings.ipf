#pragma rtGlobals=2		// Use modern global access method.#pragma version = 0.1	//  way early in development - modified April 16 2009#pragma IgorVersion = 5.05	// need last version of Igor 5//#include "twoP_Base"//#include "NIDAQconstsErrMsgsConfigs"// Code for getting settings/preferences info from disk file, or from user, and for saving the info to the preferences file// This version requires the legacy NIDAQ XOP, for operation with traditional NI Drivers, not mx//******************************************************************************************************// function for adding  the settings tab.Function Settings_add ()		St_MakeGlobals ()	St_AddControls ()end//******************************************************************************************************//remove the setting tab and associated global controlsFunction Settings_remove ()		//TCU3_RemoveTab ("Two_Photon", "TwoPtabControl", "Settings")	KilldataFolder/z root:packages:twoP:stend//******************************************************************************************************// Makes global variables associated with  Preferences and SettingsFunction St_MakeGlobals ()		if (!(datafolderexists ("root:packages")))		newdatafolder root:packages	endif	if (!(datafolderexists ("root:packages:twoP")))		newdatafolder root:packages:twoP	endif	if (!(datafolderExists ("root:packages:twoP:st")))		newDatafolder root:packages:twoP:st	endif	//Name of current settings file and the settings loaded from it	string/G root:Packages:twoP:st:CurSettingsFile =  StrVarOrDefault("root:Packages:twoP:st:CurSettingsFile", "No Settings File Selected")	string/G  root:packages:twoP:settingsStr = "ftype:2ps;"	// IO Connections - which device number is associated with specific functions	// At bare minimum, a board for galvo XY is needed, plus a way of getting in data, either analog input, or from photon counting	if (!(waveExists (root:Packages:twoP:st:DeviceList)))		make/o/t root:Packages:twoP:st:DeviceList = {{"Galvos Out", "PMT In", "ElectroPhys In", "WaveForm Out", "Hard Shutter Out", "Pockels Cell Out", "Power Meter In", "Un-Caging Out", "Photon Counter In"},{"Not Present", "Not Present","Not Present","Not Present","Not Present","Not Present","Not Present", "Not Present", "Not Present"}, {"", "","","","","","","", ""}}		SetDimLabel 1,0,Connection, root:Packages:twoP:st:DeviceList		SetDimLabel 1,1,Board,root:Packages:twoP:st:DeviceList		SetDimLabel 1,2,Channel,root:Packages:twoP:st:DeviceList	endif	// Trigger outputs. because triggers can be on different boards, we need to make a text wave to work a list box to hold how many triggrs we have and where they are.	if (!(WaveExists (root:Packages:twoP:st:trigOutChansList)))		make/o/t root:Packages:twoP:st:trigOutChansList = {{""}, {""}, {""}}		make/o /n= (1,3) root:Packages:twoP:st:trigOutChansSelList		SetDimLabel 1,0,Trigger,root:Packages:twoP:st:trigOutChansList		SetDimLabel 1,1,Board,root:Packages:twoP:st:trigOutChansList		SetDimLabel 1,2,Counter root:Packages:twoP:st:trigOutChansList	endif	// Timing Values	variable/G root:Packages:twoP:st:PixTicks = numVarOrDefault ("root:Packages:twoP:st:PixTicks", 20)	// Width of each tick of the pixel clock, in ticks of the 20 MHz system clock	variable/G root:Packages:twoP:st:PixTime = numVarOrDefault ("root:Packages:twoP:st:PixTime", 1e-06)	// The time taken for one tick of the pixel clock, in seconds	variable/G root:Packages:twoP:st:DutyCycle = numVarOrDefault ("root:Packages:twoP:st:DutyCycle", 0.8)	// Proportion of time spent in data collection part of scan. Not counting flyback time that is present in unidirectional scanning	variable/G root:Packages:twoP:st:FlyBackRatio = numVarOrDefault ("root:Packages:twoP:st:flyBackRatio", .5)	//Ratio of Flyback to line time.  0.5 means 2X as fast coming back as going forward. When using biderectional scanning (turbo mode) there is no flyback	variable/G root:Packages:twoP:st:ScanHeadDelay = numVarOrDefault ("root:Packages:twoP:st:ScanHeadDelay", 54e-06)	variable/G root:Packages:twoP:st:ScanHeadDelaySIS= numVarOrDefault ("root:Packages:twoP:st:ScanHeadDelay", 54e-06)	// Time (in sceonds) that XY scan output is shifted to account for delay in the response of the galvos	variable/G root:Packages:twoP:st:frameSynchTime = numVarOrDefault ("root:Packages:twoP:st:frameSynchTime", 0.3)	variable/G root:Packages:twoP:st:frameSynchTimeSIS = numVarOrDefault ("root:Packages:twoP:st:frameSynchTime", 0.3)	// minimum frame time (in seconds) when using live mode	//Scan Gain for imaging and ephys	variable/G root:packages:twoP:st:ScanGain =  numVarOrDefault ("root:Packages:twoP:st:ScanGain", 5)	variable/G root:packages:twoP:st:ePhysGain  =  numVarOrDefault ("root:Packages:twoP:st:ePhysGain", 1)	variable/G root:packages:twoP:st:ePhysSampFreq =  numVarOrDefault ("root:Packages:twoP:st:ePhysSampFreq", 200e03)	variable/G root:packages:twoP:st:ePhysSampFreqSIS =  numVarOrDefault ("root:Packages:twoP:st:ePhysSampFreq", 200e03)	// Magnifications and names of objectives are stored in this list	if (!(waveExists (root:Packages:twoP:st:objectivesList)))		make/o/t root:Packages:twoP:st:objectivesList  = {{""}, {""}, {""}, {""}, {""}}// A list of microscope objectives and their magnifications in µm/volt		make/o/n= (1,5) root:Packages:twoP:st:objectivesSelList		SetDimLabel 1,0,Obj,root:Packages:twoP:st:objectivesList		SetDimLabel 1,1,XScal,root:Packages:twoP:st:objectivesList		SetDimLabel 1,2,YScal,root:Packages:twoP:st:objectivesList		SetDimLabel 1,3,XOffset,root:Packages:twoP:st:objectivesList		SetDimLabel 1,4,YOffset,root:Packages:twoP:st:objectivesList	endif	string/G root:packages:twoP:st:CurMag	variable/G root:packages:twoP:st:CurMagPos	variable/G root:packages:twoP:st:MicrometerVal	variable/G root:packages:twoP:st:MicrometerValSIS	//defining the full, or default, scan values	variable /G root:Packages:twoP:st:ImWidthFull = numVarOrDefault ("root:Packages:twoP:st:imWidthFull", 512)	variable /G root:Packages:twoP:st:ImHeightFull = numVarOrDefault ("root:Packages:twoP:st:imHeightFull", 512)	variable /G root:Packages:twoP:st:XSVFull = numVarOrDefault ("root:Packages:twoP:st:XSVFull", -7.5)	variable /G root:Packages:twoP:st:YSVFull = numVarOrDefault ("root:Packages:twoP:st:YSVFull", -7.5)	variable /G root:Packages:twoP:st:XEVFull = numVarOrDefault ("root:Packages:twoP:st:XEVFull", 7.5)	variable /G root:Packages:twoP:st:YEVFull = numVarOrDefault ("root:Packages:twoP:st:YEVFull", 7.5)	variable/G root:Packages:twoP:st:LSYV = 0	//Which stage procedure is being used	string/G root:Packages:twoP:st:stage = StrVarOrDefault ("root:Packages:twoP:st:stage", "none selected")	//String for list of default tabs to load	string/G root:packages:twoP:st:defaultTabsList =StrVarOrDefault ("root:Packages:twoP:st:defaultTabsList", "")end//******************************************************************************************************//Adds controls for making and saving setings to the twoP panelFunction St_AddControls()		//Load and Save Settings	Button LoadSettingsButton,pos={9,33},size={102,22},proc=St_LoadSettings,title="Load Settings"	Button LoadSettingsButton, help={"Loads settings from a file saved on disk and applies the settings, if \"Acquire\" Tab is loaded."}	Button SaveSettingsButton,pos={125,33},size={102,22},proc=St_SaveSettings,title="Save Settings"	Button SaveSettingsButton, help={"Saves settings to a file on disk."}	Button ApplySettingsButton,pos={125,64},size={102,22},title="Apply Settings", proc = St_ApplySettings	Button ApplySettingsButton, help={"Applies settings by copying values into the \"Acquire\" folder. Not available unless \"Acquire\" tab is loaded."}	Button revertSettingsButton,pos={9,64},size={102,22},proc=St_RevertSettings,title="Revert Settings"	Button revertSettingsButton , help = {"Reverts settings back to the current settings file, deleting any changes. Applies the settings, if \"Acquire\" Tab is loaded."}	TitleBox CurSettingsTitleBox,pos={7,102},size={130,20}, fsize = 9	TitleBox CurSettingsTitleBox,variable= root:packages:TwoP:st:CurSettingsFile	TitleBox CurSettingsTitleBox, help = {"Shows the location on disk of the currently loaded settings file."}	// Default Tabs	PopupMenu stTabsPopup,pos={7,554},size={101,20},proc=st_DefaultTabsPopMenuProc,title="Default Tabs"	PopupMenu stTabsPopup,mode=0,value= #"st_DefaultTabsListProc ()"	PopupMenu stTabsPopup, help = {"Sets default tabs to load into the main tab control"}	TitleBox stTabsTitle,pos={7,578},size={129,20}, help = {"Shows the list of default tabs to be loaded into the main tabcontrol."}	TitleBox stTabsTitle,variable= root:packages:TwoP:st:defaultTabsList	Tabcontrol TwoPTabControl UserData (Settings) = "LoadSettingsButton;SaveSettingsButton;revertSettingsButton;ApplySettingsButton;CurSettingsTitleBox;stTabsPopup;stTabsTitle;"	//Settings Tab controls, 2 of them simulate a single tab control with 2 rows of tabs	//Tab A	TabControl SettingsATab,pos={5,168},size={262,378},proc=TCU3_TabProcMulti	TabControl SettingsATab,tabLabel(0)="Connections",tabLabel(1)="Scan Timing"	TabControl SettingsATab,tabLabel(2)="Gain",value= 0	TabControl SettingsATab,userdata(SibTabs)=  "SettingsBTab"	TabControl SettingsATab,userdata(inFront)=  "1"	TabControl SettingsATab,userdata(Connections)=  "stConnectionsList;TrigSettingsListBox;AddTriggerButton;DeleteTriggerButton;TriggerModePopUp;"	TabControl SettingsATab,userdata('Scan Timing')=  "PixTimeSetVar;ScanHeadDelaySetvar;FlybackRatioSetVar;DutyCycleSetVar;PixelWidthSetVar;FrameSynchSetVar;"	TabControl SettingsATab,userdata(Gain)=  "ImageGainPopup;EPhysGainPopup;ePhysSampFreqSetVar;"	TabControl SettingsATab,userdata(CurTab)=  "Connections"	//Tab B	TabControl SettingsBTab,pos={5,145},size={262,18},proc=TCU3_TabProcMulti	TabControl SettingsBTab,tabLabel(0)="Stage",tabLabel(1)="Image Scaling"	TabControl SettingsBTab,value= -1	TabControl SettingsBTab,userdata(SibTabs)=  "SettingsATab"	TabControl SettingsBTab,userdata(inFront)=  "0"	TabControl SettingsBTab,userdata(stage)=  "StageStagePopup;stageProctitle;"	TabControl SettingsBTab,userdata('Image Scaling')=  "ImageScalingGrp;MagListBox;AddObjectiveButton;DeleteObjectiveButton;CalObjButton;"	TabControl SettingsBTab,userdata('Image Scaling') +=  "DefaultScanValuesGrp;FullPixHeightSetVar;FullPixWidthSetVar;XEndVSetVar;XStartVSetVar;"	TabControl SettingsBTab,userdata('Image Scaling') += "YEndVSetVar;YStartVSetVar;"	Tabcontrol TwoPTabControl UserData (Settings) += "SettingsATab;SettingsBTab;"	//Connections	ListBox stConnectionsList,pos={12,194},size={248,154},proc=st_ConnectionsListBoxProc	ListBox stConnectionsList,listWave=root:packages:TwoP:st:DeviceList	ListBox stConnectionsList,widths={83,94,423},userColumnResize= 1	//triggers	ListBox TrigSettingsListBox,pos={13,370},size={247,105},proc=st_trigListBoxProc	ListBox TrigSettingsListBox,listWave=root:packages:TwoP:st:trigOutChansList, selwave = root:packages:TwoP:st:trigOutChansSelList	ListBox TrigSettingsListBox,mode= 1,selRow= -1,widths={53,125,52}	ListBox TrigSettingsListBox,userColumnResize= 1	Button AddTriggerButton,pos={23,486},size={85,22},proc=St_AddTrigger,title="Add Trigger"	Button DeleteTriggerButton,pos={130,486},size={99,22},proc=St_DeleteTrigger,title="Delete Trigger"	PopupMenu TriggerModePopUp,pos={25,515},size={176,20},title="Trigger Mode"	PopupMenu TriggerModePopUp 	PopupMenu TriggerModePopUp,mode=1,popvalue="low-to-high",value= #"\"low-to-high;high-to-low\""	//Scan Timing	SetVariable PixelWidthSetVar,pos={23,202},size={186,18},proc=St_SetTimesProc,title="Pixel Ticks (20 MHz)"	SetVariable PixelWidthSetVar,help={"Set the time for a single pixel in ticks of the 20Mhz system clock"}	SetVariable PixelWidthSetVar ,disable = 1	SetVariable PixelWidthSetVar,limits={20,inf,1},value= root:packages:TwoP:st:PixTicks	SetVariable PixTimeSetVar,pos={23,233},size={180,18},title="Pixel Time"	SetVariable PixTimeSetVar,help={"Shows the time in seconds for a single pixel with the given \"Pixel Ticks\" setting."}	SetVariable PixTimeSetVar ,format="%.3W1PSec",disable = 1	SetVariable PixTimeSetVar,limits={0,0,0},value= root:packages:TwoP:st:PixTIme,noedit= 1	SetVariable ScanHeadDelaySetvar,pos={23,265},size={206,18},title="ScanHead Delay ",disable = 1, proc = SIFormattedSetVarProc	SetVariable ScanHeadDelaySetvar,help={"Set the delay time in seconds for the galvos. This is used in biderectional scanning to align left-going and right-going scan lines. "}	SetVariable ScanHeadDelaySetvar ,format="%.2W1PSec"	SetVariable ScanHeadDelaySetvar,limits={0,inf,2.5e-07},value= root:packages:TwoP:st:ScanHeadDelay	SetVariable DutyCycleSetVar,pos={23,297},size={187,18}, title="Scan DutyCycle    "	SetVariable DutyCycleSetVar,help={"Set the proportion of each horizontal scan that is kept linear for data collection. The remaining proportion is used for turnaround."}	SetVariable DutyCycleSetVar ,format="%g",disable = 1	SetVariable DutyCycleSetVar,limits={0,1,0.05},value= root:packages:TwoP:st:DutyCycle	SetVariable FlybackRatioSetVar,pos={23,329},size={157,18},title="FlyBack Ratio"	SetVariable FlybackRatioSetVar,help={"Sets the proportion of time, relative to the data collecting  part of a horizontal line, of a flyback when scanning uniderectionally. Ignored when biderectional scanning, aka \"Turbo\",  is on."}	SetVariable FlybackRatioSetVar ,format="%g",disable = 1	SetVariable FlybackRatioSetVar,limits={0,1,0.1},value= root:packages:TwoP:st:FlyBackRatio	SetVariable FrameSynchSetVar,pos={22,362},size={242,18},title="Min Live Mode Frame Time"	SetVariable FrameSynchSetVar ,format="%.0W1PSec", disable = 1	SetVariable FrameSynchSetVar,limits={0,inf,0.01},value= root:packages:TwoP:st:frameSynchTime, proc = SIformattedSetVarProcAdjustInc	//Gain	PopupMenu EPhysGainPopup,pos={22,253},size={195,20},proc=ST_GainPopUpProc,title="ElectroPhys Gain:"	PopupMenu EPhysGainPopup,help={"Sets the gain on the on-board digitizer for the elctrophysiology channels"}	PopupMenu EPhysGainPopup , disable =1	PopupMenu EPhysGainPopup,mode=2,popvalue="1: (± 10v)",value= #"\"0.5: (± 20v);1: (± 10v);10: (± 1v);100: (± 0.1v)\""	PopupMenu ImageGainPopup,pos={58,216},size={150,20},proc=ST_GainPopUpProc,title="Image Gain:"	PopupMenu ImageGainPopup,help={"Sets the gain on the on-board digitizer for the PMT channels"}	PopupMenu ImageGainPopup , disable =1	PopupMenu ImageGainPopup,mode=5,popvalue="5: (± 2v)",value= #"\"0.2: (± 50v);0.5: (± 20v);1: (± 10v);2: (± 5v);5: (± 2v);10: (± 1v);20: (± 0.5v);50: (± 0.2v)\""	SetVariable ePhysSampFreqSetVar,pos={24,283},size={220,17},title="ElectroPhys Sample Freq"	SetVariable ePhysSampFreqSetVar,format="%.0W1PHz", proc = SIFormattedSetVarProcAdjustInc	SetVariable ePhysSampFreqSetVar,limits={0,500000,10000},value= root:packages:TwoP:st:EphysSampFreq, disable = 1	//stage	PopupMenu StagestagePopup,pos={11,198},size={59,20},proc=St_stagePopupProc,title="stage"	PopupMenu StagestagePopup,mode=0,value= #"St_ListstageProcs()",disable = 1	TitleBox stageProctitle,pos={75,198},size={46,20}, disable = 1	TitleBox stageProctitle,variable= root:packages:TwoP:st:stage	SVAR stage = root:Packages:twoP:st:stage	FUNCREF GUIPprotofunc AddStageControls = $Stage + "_AddControls"	AddStageControls ()	//Image Scaling	GroupBox ImageScalingGrp,pos={11,200},size={252,148},title="Objective Scaling",disable = 1	ListBox MagListBox,pos={15,218},size={244,89},mode= 2, proc=st_ObjectivesListBoxProc	ListBox MagListBox,help={"Shows the list of objectives in use on the microscope and their scaling (mm/volt of galvo travel) and relative offsets (mm). Used to scale the scans."}	ListBox MagListBox,listWave=root:packages:TwoP:st:objectivesList,selwave = root:packages:TwoP:st:objectivesSelList	ListBox MagListBox,selRow= 0,editStyle= 2,widths={40,45,44,53,370}	ListBox MagListBox,userColumnResize= 1,disable = 1	Button AddObjectiveButton,pos={16,319},size={80,20},proc=St_AddObjProc,title="Add Obj."	Button AddObjectiveButton,help={"Add a new entry to the list of objective lenses on the microscope."},disable = 1	Button DeleteObjectiveButton,pos={99,319},size={80,20},proc=St_DelObjProc,title="Delete Obj."	Button DeleteObjectiveButton,help={"Delete the currently high-lighted item in the list of objective lenses for the microscope."},disable = 1	Button CalObjButton,pos={183,319},size={58,20},proc=st_CalibrateObjsProc,title="Calibrate"	Button CalObjButton,help={"Pops up a window which allows you to measure and set scaling and relative offsets for objectives."},disable = 1	//defaultscan values	GroupBox DefaultScanValuesGrp,pos={11,355},size={236,162},title="Default Scan Values",disable = 1	SetVariable FullPixWidthSetVar,pos={24,378},size={175,17},title="Full Image Width   ",disable = 1	SetVariable FullPixWidthSetVar,limits={2,inf,2},value= root:packages:TwoP:st:ImWidthFull	SetVariable FullPixHeightSetVar,pos={24,400},size={173,17},title="Full Image Height  ",disable = 1	SetVariable FullPixHeightSetVar,limits={2,inf,2},value= root:packages:TwoP:st:ImHeightFull	SetVariable XStartVSetVar,pos={24,433},size={181,17},title="X Starting Voltage"	SetVariable XStartVSetVar,format="%g V",disable = 1	SetVariable XStartVSetVar,limits={-10,10,0.1},value= root:packages:TwoP:st:XSVFull	SetVariable XEndVSetVar,pos={24,453},size={181,17},title="X Ending Voltage "	SetVariable XEndVSetVar,format="%g V",disable = 1	SetVariable XEndVSetVar,limits={-10,10,0.1},value= root:packages:TwoP:st:XEVFull	SetVariable YStartVSetVar,pos={24,474},size={181,17},title="Y Starting Voltage"	SetVariable YStartVSetVar,format="%g V",disable = 1	SetVariable YStartVSetVar,limits={-10,10,0.1},value= root:packages:TwoP:st:YSVFull	SetVariable YEndVSetVar,pos={24,495},size={181,17},title="Y Ending Voltage "	SetVariable YEndVSetVar,format="%g V",disable = 1	SetVariable YEndVSetVar,limits={-10,10,0.1},value= root:packages:TwoP:st:YEVFull	//Image rotationend//Controls for connections settings//******************************************************************************************************// Popup a List of boards and set list box and appropriate global variables for chosen device numFunction st_ConnectionsListBoxProc(ctrlName,row,col,event) : ListBoxControl	String ctrlName	Variable row	Variable col	Variable event	//1=mouse down, 2=up, 3=dbl click, 4=cell select with mouse or keys	//5=cell select with shift key, 6=begin edit, 7=end	if ((event == 1) && ((row > -1) && (row < 9)))		WAVE/T DevList = root:Packages:twoP:st:DeviceList 		if (col ==1)			PopupContextualMenu st_ListBoards () + SelectString(row == 0 , "Not Present", "")			if (V_Flag < 1)				return 0			endif			// put the device selected from the popout in the selected row			DevList [row] [1] = S_selection			//parse the device slected fromt he popup			variable theDev = str2num (stringfromlist (0, S_selection, ":") [4, INF])			string theBoard = stringfromlist (1, S_selection, ":")			// Delete channel information after selecting a new board			if (row == 0)				DevList [0] [2] = "0,1"			else				DevList [row] [2] = ""			endif		elseif (col ==2) // Popup List of available channels and turn channels on or off as selected			// first make sure that the device is selcted for chosen row			theDev = str2num (stringfromlist (0, DevList [row] [1] , ":") [4, INF])			if (numtype (theDev) ==2)				PopupContextualMenu "Choose a board for this connection before choosing a channel"				return 1			endif			string popStr = "", activeChansList, aChan, checked= "\\M0:!" + num2char(18) + ":" 			variable ii, numChans, numActiveChans, isMultiChan			//Configure the popup menu string for the particular connection			string rowList = DevList [row] [2]			numchans = itemsinlist (rowList, ",")			for (activeChansList = "", ii = 0; ii < numChans; ii += 1)				activeChansList += stringfromlist (0, stringfromlist (ii, rowList,  ","), ":") + ","			endfor 			numActiveChans = itemsinList (activeChansList)			switch (row)				case 0: // Analog out for galvos					popStr = "Analog outputs 0 (X) and 1 (Y) are always used for Galvos."					break				case 1: //PMT board				case 2: //ephys board					numChans =  2   //fNIDAQ_NumAnalogInputChans(theDev)					isMultiChan = 1					break				case 3:  //Vout board					numChans = 2 // fNIDAQ_NumAnalogOutPutChans(theDev)					isMultiChan = 1					break				case 4:  // Hard shutter out (only need a single line)					numChans = 8					isMultiChan = 0					break				case 5: //Pockels cell out				case 7: // Un-Caging output					numChans = 2// fNIDAQ_NumAnalogOutPutChans(theDev)					isMultiChan = 0					break				case 6: //Power Meter in					numChans =  2// fNIDAQ_NumAnalogInputChans(theDev)					isMultiChan = 0					break				case 8:  // photon counter device					numChans =  st_NumCounters (theDev)					popStr = "\\M1(0 used for gating;"					isMultiChan = 1					break			endswitch			// make the popuplist			if (row > 0)				for (ii = (row == 8 ? 1 : 0); ii < numChans; ii += 1)					aChan =  num2str (ii)					if (FindListItem(achan, activeChansList , ",") != -1)						popStr += checked					endif					popstr += aChan + ";"				endfor			endif			// popup the list			PopupContextualMenu popStr			if ((V_Flag < 1) || (row == 0))				return 0			endif			//change cell to reflect popmenu choice			aChan = num2str (V_flag-1)			if (isMultiChan)				if (FindListItem(achan, activeChansList , ",") != -1) // channel was active, so remove					for ( ii = 0; ii < numActiveChans; ii += 1)						if (str2num(stringfromlist (0, stringfromlist (ii, rowList,  ","), ":")) == V_flag-1)							activeChansList = RemoveListItem(ii, rowList , ",")							break						endif					endfor 				else // channel not active, so add to list					string chandesc = "ch_" + aChan					prompt chandesc, "description:"					doprompt "Describe the Channel", chandesc					if (V_Flag)						return 1					endif					activeChansList = SortList (AddListItem(aChan + ":" + chanDesc, rowList, ","), ",", 2)				endif			else //single channel connection				if (str2num (activeChansList) == V_Flag -1)					activeChansList = ""				else					activeChansList= aChan				endif			endif			DevList [row] [2] = activeChansList		endif	endif	return 0end//******************************************************************************************************//manages the listof triggers, editable with popup menusFunction st_trigListBoxProc(ctrlName,row,col,event) : ListBoxControl	String ctrlName	Variable row	Variable col	Variable event	//1=mouse down, 2=up, 3=dbl click, 4=cell select with mouse or keys	//5=cell select with shift key, 6=begin edit, 7=end	Wave/T trigOutSettingsList =  root:Packages:twoP:st:trigOutChansList	Wave trigoutSelWave = root:packages:TwoP:st:trigOutChansSelList	variable nTrigs = dimsize (trigOutSettingsList,0)	if ((event == 1) && ((row > -1) && (row < nTrigs)))		if (cmpstr (trigOutSettingsList [0] [0], "") == 0)			PopupContextualMenu "Add a trigger before trying to configure it."			return 1		elseif (col ==1)			PopupContextualMenu st_ListBoards ()			if (V_Flag < 1)				return 0			endif			// put the device selected from the popout in the selected row			trigOutSettingsList [row] [1] = S_selection		elseif (col ==2)  // Popup List of available counters, and let user choose a counter			//parse the device slected from the popup, and make sure it is not nan			variable theDev = str2num (stringfromlist (0, trigOutSettingsList [row] [1] , ":") [4, INF])			if (numtype (theDev) ==2)				PopupContextualMenu "Choose a board for this trigger before choosing a counter."				return 1			endif			string popStr = "", aChan, checked= "\\M0:!" + num2char(18) + ":" 			variable ii, numChans			variable nCtrs = st_NumCounters (theDev)			variable ctr = str2num  (trigOutSettingsList [row] [2])			for (ii = 0; ii < nCtrs; ii += 1)				if (ii ==ctr)					popStr += checked				endif				popstr += num2str (ii) + ";"			endfor			PopupContextualMenu popStr			if (V_Flag < 1)				return 1			endif			//now change the string to reflect the selection			if (ctr == V_Flag -1)				ctr = Nan				trigOutSettingsList [row] [2] = ""			else				ctr = V_Flag -1				trigOutSettingsList [row] [2] = num2str (ctr)			endif		endif	endifend//******************************************************************************************************//Adds a new row to the waves for the trigger list boxes of the acquire and settings tabsFunction St_AddTrigger(ctrlName) : ButtonControl	String ctrlName		Wave/T trigOutSettingsList =  root:Packages:twoP:st:trigOutChansList	WAVE trigOutSettingsSelList = root:Packages:twoP:st:trigOutChansSelList	variable LastTrig = dimsize (trigOutSettingsList,0) 	if ((LastTrig == 1) && (cmpstr (trigOutSettingsList [0] [0], "") == 0))		trigOutSettingsList [0] [0] = "click to edit"		trigOutSettingsSelList [0] [0] = 2	else		insertpoints /M= 0 LastTrig , 1, trigOutSettingsList,trigOutSettingsSelList		//first row in  trigger listbox is description editable by user. 2nd row is device. 3rd row is counter num		trigOutSettingsList [LastTrig] [0] =  "click to edit"		trigOutSettingsSelList [LastTrig] [0] =2	endif	End//******************************************************************************************************//deletes the selected row in the waves for the trigger listboxesFunction St_DeleteTrigger(ctrlName) : ButtonControl	String ctrlName		Wave/T trigOutSettingsList =  root:Packages:twoP:st:trigOutChansList	WAVE trigOutSettingsSelList = root:Packages:twoP:st:trigOutChansSelList	//find selected row in the listbox and delete it from all the waves for the settings and acquire listboxes	controlinfo/W= Two_Photon TrigSettingsListBox	// Don't delete the first row, or we lose the column titles	if (dimsize(trigOutSettingsList, 0) == 1)		 trigOutSettingsList = ""		 trigOutSettingsSelList [] [] = 0	else		DeletePoints /M=0 (V_Value), 1, trigOutSettingsList,trigOutSettingsSelList	endifEnd//******************************************************************************************************//Lists the Nidaq boards present in the computer, for popupmenus in the list boxes of connections and triggersFunction/S st_ListBoards ()		string DevList =  "PCI-6036E;PCI-6110" //fNIDAQ_ListBoards(-1)		return DevListend//******************************************************************************************************//returns how many counters are present  for the given NI boardFunction st_NumCounters (theDev)	variable theDev	//	if (fNIDAQ_GPCTR_Control(theDev, ND_COUNTER_0, ND_RESET))//		return 0//	elseif  (fNIDAQ_GPCTR_Control(theDev, ND_COUNTER_1, ND_RESET))//		return 1//	elseif  (fNIDAQ_GPCTR_Control(theDev, ND_COUNTER_2, ND_RESET))//		return 2//	elseif  (fNIDAQ_GPCTR_Control(theDev, ND_COUNTER_3, ND_RESET))//		return 3//	elseif  (fNIDAQ_GPCTR_Control(theDev, ND_COUNTER_4, ND_RESET))//		return 4//	elseif  (fNIDAQ_GPCTR_Control(theDev, ND_COUNTER_5, ND_RESET))//		return 5//	elseif  (fNIDAQ_GPCTR_Control(theDev, ND_COUNTER_6, ND_RESET))//		return 6//	elseif  (fNIDAQ_GPCTR_Control(theDev, ND_COUNTER_7, ND_RESET))//		return 7//	else		return 8//	endifend//Functions for Scan Timing controls//******************************************************************************************************// This function sets the calculated pixel time from the pixel ticks value.Function St_SetTimesProc(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName		//Get global values to calculate times	NVAR PixTime = root:packages:twoP:st:PixTIme	// Set PixelTime by dividing pixelticks by clock rate of 20 MHz clock	PixTime = varNum/20e06end//Functions for Gain controls//******************************************************************************************************Function St_GainPopUpProc(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr		if ((cmpstr (ctrlName, "EPhysGainPopup")) == 0)		NVAR  ScanGain = root:packages:twoP:st:ePhysGain	else		NVAR  ScanGain = root:packages:twoP:st:ScanGain	endif	ScanGain = str2num (stringfromlist (0, popStr, ":"))End//Functions for stage controls//******************************************************************************************************// DeleteInludes the previous stage motor procedure and removes its contols, then InsertIncludes thenewly //  slected stage motor procedure, and runs the procedure (if it exists) to add more controls to give user more choices on connectionsFunction St_stagePopupProc(pa) : PopupMenuControl	STRUCT WMPopupAction &pa	switch( pa.eventCode )		case 2: // mouse up			Variable popNum = pa.popNum			String popStr = pa.popStr		//Call function from old stage motor procedure to clean up after itself and then deleteinclude it	//If you want to add controls to the Settings panel for your stage motor procedure, make a function and name it with the name of your procedure file	// minus the "twoPStage_" + "UnSettingsFunc" and it will run here, to remove the controls you added earlier	SVAR stageProc = root:Packages:twoP:st:stage	if (strlen (stageProc) > 2)		FuncRef GuipProtofunc UnSettingsFunc = $stageProc + "_UnSetttingsFunc"		UnSettingsFunc ()		Execute/P/Q/Z "DELETEINCLUDE \"twoPStage_" + stageProc +  "\""	endif	//Set the global string and title box to the new stage procedure. 	stageProc = PopStr [10, strlen (popStr)-1]	//InsertInclude the new stage procedure and compile the proceudres	Execute/P/Q/Z "INSERTINCLUDE \"" + popstr + "\""	Execute/P/Q/Z "COMPILEPROCEDURES "	// put up controls to let user set stage .	string stageSettingsFuncStr = stageProc + "_SettingsFunc()"	Execute/P/Q/Z stageProc + "_SettingsFunc()" //stageSettingsFuncStr	break	endswitchend//******************************************************************************************************// Returns a list of stage procedures in the twoP stage procedures folder. If you write your own stage motor procedure, make the file name start with "twoP_stageMotor_"// so it will be listed.Function/S St_ListstageProcs ()		PathInfo  twoPstagePath	if (V_Flag == 0)		PathInfo Igor		string twoPstagePathStr = S_Path + "User Procedures:twoP:stage:"		NewPath/q /O twoPstagePath, twoPstagePathStr	endif	return "" // GUIPListFilesinDir ("twoPStage_*", ".ipf", "twoPstagePath", 1)end//Functions for Image Scaling Controls//******************************************************************************************************// Inserts a row in the list of objectives//******************************************************************************************************// Deletes a row from the list of objectives//Functions for controls for setting default tabs to load on startup//******************************************************************************************************//Pops up a list of tabs, and adjusts the global list of tabs to reflect the user's choiceFunction st_DefaultTabsPopMenuProc(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr		SVAR defaultTabsList = root:packages:twoP:st:defaultTabsList	//now change the string to reflect the selection	variable numTabs = itemsinList (defaultTabsList)	if (FindListItem(popStr, defaultTabsList , ",") != -1) // tab was active, so remove		defaultTabsList = RemoveFromList(popStr, defaultTabsList , ",")	else // channel not active, so add to list		defaultTabsList = SortList (AddListItem(popStr, defaultTabsList, ","), ",", 0)	endifEnd//******************************************************************************************************//Get list of procedures and apply checks as per global string of selected default tabsFunction/S st_DefaultTabsListProc ()		SVAR defaultTabsList = root:packages:twoP:st:defaultTabsList	String checked= "\\M0:!" + num2char(18) + ":" // checkmark code	string procList = "", FIles = "" // ListFilesinDir ("TwoP_*", ".ipf", "TwoPpath", 1)	string afile	variable numfiles = itemsinlist (Files), ii	for (ii=0;ii<numfiles;ii+=1)		afile= (stringfromlist (ii, Files))[5, INF]		if ((cmpstr (aFile, "BASE")) == 0)			continue		endif		//look at currently selected state		if (FindListItem(aFile, defaultTabsList , ",") != -1)			procList += checked		endif		procList += aFile + ";"	endfor	return procListend//Functions to make and load settings files//******************************************************************************************************//Stores settings in a global settings string and in a text file on disk in a simple stringbykey formatFunction St_SaveSettings(ctrlName) : ButtonControl	String ctrlName		//Open a file for writing. If settings file is already chosen, position to overwrite it	SVAR filename = root:packages:twoP:st:curSettingsFIle 	variable fileRef 	// try to Open current settings file to see if it exists	Open /Z=1 fileref as filename	//if no file name, file does not exist. Point open file to default settings in Igor Pro folder	if (cmpstr (S_filename, "") == 0)		Open/D/C="IGR0"/T=".2ps"/M="Save a TwoP settings File"/P= Igor fileRef as "DefaultSettings.2ps"	else //file exists. Point open file towards it		close fileref		Open/D/C="IGR0"/T=".2ps"/M="Save a TwoP settings File"  fileRef as filename	endif	if (cmpstr (S_filename, "") == 0)		return 1	endif	filename = S_fileName	St_SaveSettingsStr ()  //Set the global string 	//Now open the chosen file (for real this time)	Open/C="IGR0"/T=".2ps" fileRef as filename	 SVAR settingsStr = root:packages:twoP:settingsStr	//write the settings string	FBinWrite  fileRef, settingsStr	//close the file	close fileRefend//******************************************************************************************************// Saves the settings from the control panel into the global settings stringFunction St_SaveSettingsStr ()		SVAR settingsStr = root:packages:twoP:settingsStr	// first thing is a filetype we can check for when loading the settings file	SettingsStr = "ftype:2ps;"	//Default Tabs List	SVAR defaultTabsList = root:packages:twoP:st:defaultTabsList	SettingsStr += "defaultTabs:" + defaultTabsList + ";"	// The list of connections is stored in a single string by key, with the wave printed in igor's format	// for entering waves from the command line so it can be easily recreated	WAVE/T deviceList = root:packages:twop:st:deviceList	variable ip,  numlines = dimsize (deviceList,0)	SettingsStr += "deviceList:"	for (ip = 0; ip < numlines; ip += 1)		SettingsStr += deviceList [ip] [1] + "@" + deviceList [ip] [2] + "@"	endfor	SettingsStr += ";"	// Ditto for the list of triggers	wave/T trigOutList = root:packages:TwoP:st:trigOutChansList	numlines = dimsize (trigOutList, 0)	SettingsStr += "triglist:"	for (ip = 0; ip < numlines; ip += 1)		SettingsStr +=  trigOutList [ip] [0] + "@"  + trigOutList [ip] [1] + "@" + trigOutList [ip] [2] + "@"	endfor	SettingsStr += ";"	//Trigger mode	controlinfo/w= Two_Photon TriggerModePopUp	SettingsStr += "TriggerMode:" + num2str (V_Value) +  ";" // 1 = low-to-high, 2= high-to-low	//Scan Timing	NVAR PixTicks = root:packages:TwoP:st:PixTicks	NVAR ScanHeadDelay = root:packages:TwoP:st:ScanHeadDelay	NVAR DutyCycle = root:packages:TwoP:st:DutyCycle	NVAR FlyBackRatio = root:packages:TwoP:st:FlyBackRatio	NVAR frameSynchTIme = root:packages:TwoP:st:frameSynchTime	SettingsStr += "PixTicks:" + num2str (PixTicks) + ";"	SettingsStr += "ScanHeadDelay:" + num2str (ScanHeadDelay) + ";"	SettingsStr += "DutyCycle:" + num2str (DutyCycle) + ";"	SettingsStr += "FlyBackRatio:" + num2str (FlyBackRatio) + ";"	SettingsStr += "frameSynchTIme:" + num2str (frameSynchTIme) + ";"	//Gain	NVAR ePhysGain = root:packages:twoP:st:ePhysGain	NVAR scanGain = root:packages:twoP:st:scanGain	NVAR ePhysSampFreq =root:packages:twoP:st:ePhysSampFreq	SettingsStr += "scanGain:" + num2str (scanGain) + ";"	SettingsStr += "ePhysGain:" + num2str (ePhysGain) + ";"	SettingsStr += "ePhysSampFreq:" + num2str (ePhysSampFreq) + ";"	//defining the full, or default, scan values	NVAR imWidthFull= root:Packages:twoP:st:ImWidthFull	NVAR imHeightFull= root:Packages:twoP:st:ImHeightFull	NVAR XSVFull = root:Packages:twoP:st:XSVFull	NVAR YSVFull = root:Packages:twoP:st:YSVFull	NVAR XEVfull = root:Packages:twoP:st:XEVFull	NVAR YEVFull= root:Packages:twoP:st:YEVFull	SettingsStr += "imWidthFull:" + num2str (imWidthFull) + ";"	SettingsStr += "imHeightFull:" + num2str (imHeightFull) + ";"	SettingsStr += "XSVFull:" + num2str (XSVfull) + ";"	SettingsStr += "XEVfull:" + num2str (XEVfull) + ";"	SettingsStr += "YSVfull:" + num2str (YSVfull) + ";"	SettingsStr += "YEVfull:" + num2str (YEVfull) + ";"	// The list of objectives is stored in a single string by key, with the wave printed in igor's format	// for entering waves from the command line so it can be easily recreated	WAVE/T objList = root:Packages:twoP:st:ObjectivesList	numlines = dimsize (objList,0)	SettingsStr += "ObjList:"		for (ip = 0; ip < numlines; ip += 1)		SettingsStr += objList [ip] [0] + "@" + objList [ip] [1] + "@"+ objList [ip] [2] + "@"+ objList [ip] [3] + "@"+ objList [ip] [4] + "@"	endfor	SettingsStr += ";"	//Default tabs list used when first opening main control panel	SVAR defaultTabsList = root:packages:TwoP:st:defaultTabsList	SettingsStr += "defaultTabsList:" + defaultTabsList + ";"	//stage procedures can define their own settings, append them to the main settings string	SVAR stage = root:Packages:twoP:st:stage	SettingsStr += "stage:" + stage + ";"	funcref GUIPProtoFunc  stageSettingsProc = $(stage + "_SaveSettings")	stageSettingsProc ()	End//******************************************************************************************************// Loads settings from a saved settings file into a global string. Calls Revert Setttings to load globals for controlsFunction St_LoadSettings(ctrlName) : ButtonControl	String ctrlName		variable fileRef 	Open/R/C="IGR0"/T=".2ps"/P= Igor fileRef 	if (cmpstr (S_filename, "") == 0)		return 1	endif	//Save name of settings file in global string for display on control panel	SVAR filename = root:packages:twoP:curSettingsFIle 	filename = S_fileName	//Save settings in a global string	SVAR SettingsStr =  root:packages:twoP:settingsStr	FReadLine/T= ""  fileref, SettingsStr	close fileRef	//was it a 2ps file?	if ((cmpStr (stringbykey ("ftype", SettingsStr), "2ps")) != 0)		doalert 0, "That file was not a 2-photon settings file."		SettingsStr = ""		return 1	endif	//read the strings values into global variables, etc. Code is same as for revert settings function	St_RevertSettings ("")end//******************************************************************************************************// Loads settings from the big global string and puts the settings in the proper global variables for the controlsFunction St_RevertSettings(ctrlName) : ButtonControl	String ctrlName			SVAR SettingsStr = root:packages:twoP:settingsStr	string tempStr = stringbykey ("deviceList", SettingsStr)	variable ip, nLines = itemsinList (tempstr, "@")/2	//connections	WAVE/T deviceList = root:packages:twoP:st:deviceList	for (ip =0 ; ip < nLines ; ip += 1)		deviceList [ip] [1] = stringfromlist ((ip*2),tempStr, "@")		deviceList [ip] [2] = stringfromlist ((ip*2 + 1),tempStr, "@")	endfor	//triggers	tempStr = stringbykey ("triglist", SettingsStr)	nLines = itemsinList (tempstr, "@")/3	WAVE/T outputTrigs = root:packages:TwoP:st:trigOutChansList	WAVE trigOutChansSelList = root:packages:TwoP:st:trigOutChansSelList	redimension/n = (nLines, 3) outputTrigs, trigOutChansSelList	trigOutChansSelList [] [0] = 2	trigOutChansSelList [] [1,2] = 0	for (ip =0 ; ip < nLines ; ip += 1)		outputTrigs [ip] [0] = stringfromlist ((ip*3),tempStr, "@")		outputTrigs [ip] [1] = stringfromlist ((ip*3 + 1),tempStr, "@")		outputTrigs [ip] [2] = stringfromlist ((ip*3 + 2),tempStr, "@")	endfor	//Trigger mode 1 = low to high, 2= high to low	popupmenu TriggerModePopUp,  win=Two_Photon, mode = numberbyKey ("TriggerMode", SettingsStr)	//scan timing	NVAR pixticks = root:packages:twoP:st:pixTicks	NVAR pixTime = root:packages:twoP:st:pixTime	pixTicks = numberbykey ("pixTicks", SettingsStr)	pixTIme = pixTicks/20e06	NVAR scanHeadDelay = root:packages:twoP:st:scanHeadDelay	scanHeadDelay =  numberbykey ("ScanHeadDelay", SettingsStr)	NVAR dutyCycle = root:packages:twoP:st:dutycycle	dutycycle = numberbykey ("DutyCycle", SettingsStr)	NVAR flybackRatio = root:packages:twoP:st:flyBackratio	flybackRatio = numberbykey("FlyBackRatio", SettingsStr)	NVAR frameSynchTime = root:packages:twoP:st:frameSynchTime	frameSynchTime = numberbykey("frameSynchTime", SettingsStr)	//Gain	NVAR scanGain = root:packages:twoP:st:scanGain	scangain =  numberbykey ("scanGain", SettingsStr)	controlinfo/w= Two_Photon imagegainpopup	tempStr = stringbykey ("value", s_recreation, "=", ",")	tempstr = tempstr [5, strlen (tempStr) -5]	nLines = itemsinlist (tempStr, ";")	for (ip = 0; ip < nLines; ip += 1)		if (scanGain == str2num (stringFromList (0, stringfromlist (ip, tempStr ,";"), ":")))			PopupMenu ImageGainPopup win = Two_Photon, mode = (ip+1)			break		endif	endfor	NVAR ephysGain = root:packages:twoP:st:ePhysGain	ephysGain = numberbykey ("ephysGain", SettingsStr)	controlinfo/w= Two_Photon ePhysGainPopup	tempStr = stringbykey ("value", s_recreation, "=", ",")	tempstr = tempstr [5, strlen (tempStr) -5]	nLines = itemsinlist (tempStr, ";")	for (ip = 0; ip < nLines; ip += 1)		if (ephysGain == str2num (stringFromList (0, stringfromlist (ip, tempStr ,";"), ":")))			PopupMenu ePhysGainPopup win = Two_Photon, mode = (ip+1)			break		endif	endfor	NVAR ePhysSampFreq = root:packages:twoP:st:ePhysSampFreq	ePhysSampFreq = numberbykey ("ePhysSampFreq", SettingsStr)	//image Scaling	// Objective List	WAVE/T objList =root:Packages:twoP:st:ObjectivesList	tempStr = stringbykey ("objlist", SettingsStr)	nLines = itemsinList (tempstr, "@")/5	redimension/n = ((nLines), 5) objList	for (ip =0 ; ip < nLines ; ip += 1)		objList [ip] [0] = stringfromlist ((ip*5),tempStr, "@")		objList [ip] [1] = stringfromlist ((ip*5 + 1),tempStr, "@")		objList [ip] [2] = stringfromlist ((ip*5 + 2),tempStr, "@")		objList [ip] [3] = stringfromlist ((ip*5 + 3),tempStr, "@")		objList [ip] [4] = stringfromlist ((ip*5 + 4),tempStr, "@")	endfor	//defining the full, or default, scan values	NVAR imWidthFull= root:Packages:twoP:st:ImWidthFull	NVAR imHeightFull= root:Packages:twoP:st:ImHeightFull	NVAR XSVFull = root:Packages:twoP:st:XSVFull	NVAR YSVFull = root:Packages:twoP:st:YSVFull	NVAR XEVfull = root:Packages:twoP:st:XEVFull	NVAR YEVFull= root:Packages:twoP:st:YEVFull	imWidthFull = numberbykey ("imWidthFull", settingsStr)	imHeightFull = numberbykey ("imHeightFull", settingsStr)	XSVfull = numberbykey ("XSVfull", settingsStr)	XEVfull = numberbykey ("XEVfull", settingsStr)	YEVfull = numberbykey ("YEVfull", settingsStr)	YSVfull = numberbykey ("YSVfull", settingsStr)	//stage procedures can have their own settings and unsettings functions	 SVAR stageProc = root:Packages:twoP:st:stage	 string NewstageProc = stringbykey ("stage", settingsStr)	if (cmpstr (stageProc, NewstageProc) != 0)		//Delete old stage procedures		FuncRef GUIPProtofunc UnSettingsFunc = $stageProc + "_UnSetttingsFunc"		UnSettingsFunc ()		Execute/P/Q/Z "DELETEINCLUDE \"twoP_stageMotor_" + stageProc +  "\""		//InsertInclude the new stage procedure and compile the proceudres		Execute/P/Q/Z "INSERTINCLUDE \"" + "twoP_stageMotor_" + stageProc + "\""		Execute/P/Q/Z "COMPILEPROCEDURES "		//Set the global string and title box to the new stage procedure. 		stageProc = NewstageProc	endif	//execute any things the new stage procedure wants to do when loading from a settings string	Execute/P/Q/Z stageProc + "_LoadSettings()" end//******************************************************************************************************// Applies  settings from a saved settings file, by copying neccesary globals and variables into the acquire folderFunction St_ApplySettings (ctrlName) : ButtonControl	String ctrlName	//	//save currrent settings to the global String before applying//	St_SaveSettingsStr ()//	//Can only apply settings if acquire is loaded//	if (WhichListItem("Acquire", ListTabs ("two_Photon", "TwoPTabControl") , ";"  , 0)  < 0)//		doalert 0, "You can only apply settings if the \"Acquire\" tab is loaded."//		return 1//	endif//	//need execute because acquire file might not be loaded when compiled	execute "aq_ApplySettings()"endFunction st_CalibrateObjsProc(ba) : ButtonControl	STRUCT WMButtonAction &ba	switch( ba.eventCode )		case 2: // mouse up			// click code here				WAVE calWaveX = root:packages:twoP:st:CalwaveX				WAVE calWaveY = root:packages:twoP:st:CalwaveY				WAVE LiveWave = root:packages:				NVAR XSVFull = root:packages:twoP:st:XSVFull				NVAR XEVFull =  root:packages:twoP:st:XEVFull				NVAR YSVFull = root:packages:twoP:st:XSVFull				NVAR YEVFull =  root:packages:twoP:st:XEVFull								Display /W=(79,44,618,676) calWaveY vs calWaveX as "Calibrate Objectives"	AppendImage ::aq:Live_Wave	ModifyImage Live_Wave ctab= {*,*,Grays,0}	SetDataFolder fldrSav0	ModifyGraph margin(left)=1,margin(bottom)=1,margin(top)=1,margin(right)=1,width={Plan,1,bottom,left}	ModifyGraph mode=3	ModifyGraph msize=3	ModifyGraph mrkThick=2	ModifyGraph mirror=2	ModifyGraph nticks=0	ModifyGraph noLabel=2	ModifyGraph axThick=0	Label left "\\u#2"	Label bottom "\\u#2"	ShowTools/A	ControlBar 93	ListBox MagListBox,pos={6,3},size={244,89},proc=st_ObjectivesListBoxProc	ListBox MagListBox,help={"Shows the list of objectives in use on the microscope and their scaling (mm/volt of galvo travel) and relative offsets (mm). Used to scale the scans."}	ListBox MagListBox,listWave=root:packages:TwoP:st:objectivesList	ListBox MagListBox,selWave=root:packages:TwoP:st:objectivesSelList,mode= 2	ListBox MagListBox,selRow= 1,editStyle= 2,widths={40,45,44,53,370}	ListBox MagListBox,userColumnResize= 1	Button AddObjectiveButton,pos={255,6},size={80,20},proc=St_AddObjProc,title="Add Obj."	Button AddObjectiveButton,help={"Add a new entry to the list of objective lenses on the microscope."}	Button DeleteObjectiveButton,pos={338,6},size={80,20},proc=St_DelObjProc,title="Delete Obj."	Button DeleteObjectiveButton,help={"Delete the currently high-lighted item in the list of objective lendes for the microscope."}	SetVariable curMagSetVar,pos={260,32},size={75,19},disable=2,title="Obj:"	SetVariable curMagSetVar,font="Arial",fSize=14,frame=0	SetVariable curMagSetVar,limits={-inf,inf,0},value= root:packages:TwoP:st:CurMag	Button SetYButton,pos={391,32},size={54,20},proc=st_CalScaleButtonProc,title="Start Y"	Button SetYButton,font="Arial",fSize=12	Button SetOffsetButton,pos={450,32},size={63,20},proc=st_CalSetOffsetProc,title="Set Offset"	Button SetOffsetButton,font="Arial",fSize=12	Button GoButton,pos={436,6},size={76,20},proc=Aq_StartScan,title="start scan"	Button GoButton,help={"Starts or Aborts a Scan."},font="Arial",fSize=12	Button CalFinishButton,pos={255,59},size={104,20},title="Finish Calibration"	Button CalFinishButton,font="Arial",fSize=12	Button OpenstageButton,pos={397,59},size={117,20},proc=AqControls_stagePanel,title="open stage Panel"	Button OpenstageButton,font="Arial",fSize=12	Button SetXButton,pos={329,32},size={56,20},proc=st_CalScaleButtonProc,title="Start X"	Button SetXButton,font="Arial",fSize=12											break	endswitch	return 0EndFunction st_ObjectivesListBoxProc(lba) : ListBoxControl	STRUCT WMListboxAction &lba	Variable row = lba.row	Variable col = lba.col	WAVE/T/Z listWave = lba.listWave	WAVE/Z selWave = lba.selWave	switch( lba.eventCode )		case -1: // control being killed			break		case 3: // double click			break		case 4: // cell selection			SVAR curMag = root:packages:twoP:st:CurMag			NVAR CurMagPos = root:packages:twoP:st:CurMagPos			curMag = listWave [row] [0]			CurMagPos = row		case 5: // cell selection plus shift key			break		case 6: // begin edit			break		case 7: // finish edit			if (col > 0)				variable num = str2num (listWave [row] [col])				if (numtype (num) ==2)					doalert 0, "The value entered here needs to be numeric."					listWave [row] [col] = "0"				endif			endif			break	endswitch	return 0EndFunction St_AddObjProc(ctrlName) : ButtonControl	String ctrlName	WAVE/T ObjectivesList =  root:Packages:twoP:st:ObjectivesList	WAVE ObjectivesSelList = root:Packages:twoP:st:ObjectivesSelList	variable LastMag = dimsize (ObjectivesList,0)	if ((LastMag == 1) && (cmpstr (ObjectivesList [0] [0], "") == 0))		ObjectivesList  [0] [0] ="Click to edit"		ObjectivesList  [0] [1,4] ="0"		ObjectivesSelList = 2			else		insertpoints /M= 0 LastMag, 1, ObjectivesList, ObjectivesSelList		ObjectivesList [LastMag] [0] ="Click to edit"		ObjectivesList [LastMag] [1,4] ="0"		ObjectivesSelList [LastMag] [] = 2	endifEndFunction St_DelObjProc(ctrlName) : ButtonControl	String ctrlName		WAVE/T ObjectivesList = root:Packages:twoP:st:ObjectivesList	WAVE ObjectivesSelList = root:Packages:twoP:st:ObjectivesSelList	controlinfo/W= twoP MagListBox	if (dimsize (ObjectivesList, 0) == 1)		ObjectivesList = ""		ObjectivesSelList = 0	else		DeletePoints /M=0 (V_Value), 1, ObjectivesList, ObjectivesSelList	endifEndFunction St_getScanForObjCalProc(ba) : ButtonControl	STRUCT WMButtonAction &ba	switch( ba.eventCode )		case 2: // mouse up			// click code here			break	endswitch	return 0EndFunction st_CalScaleButtonProc(ba) : ButtonControl	STRUCT WMButtonAction &ba	switch( ba.eventCode )		case 2: // mouse up			// click code here			SVAR stageProcStr = root:packages:twoP:st:stage			FUNCREF GUIPProtofuncS stageUpdate = $stageProcStr + "_UpdateProc"			StageUpdate ("")			NVAR XMicronsFromHome = root:packages:twoP:aq:xMicronsFromHome			NVAR YMicronsFromHome = root:packages:twoP:aq:yMicronsFromHome			string theButton = ba.ctrlName			variable startVal = str2num (ba.userData)			if (numtype (startVal) == 2) // set 0				if (Cmpstr (theButton, "SetXButton") == 0)					button setYButton win = Calibrate_Objectives, userdata = ""					button setXbutton win = Calibrate_Objectives, fcolor = (0,65535, 0), title = "End X"					button setXbutton win = Calibrate_Objectives,  userdata = num2str (XMicronsFromHome)				else					button setXButton win = Calibrate_Objectives, userdata = ""					button setYbutton win = Calibrate_Objectives, fcolor = (0,65535, 0),  title = "End Y"					button setybutton win = Calibrate_Objectives,  userdata = num2str (YMicronsFromHome)				endif			else // set 1				WAVE/T ObjList = root:packages:twoP:st:ObjectivesList 				NVAR curMagPos = root:packages:twoP:st:curMagPos				if (Cmpstr (theButton, "SetXButton") == 0)					NVAR XEVFull = root:packages:twoP:st:XEVFull					NVAR XSVFull = root:packages:twoP:st:XSVFull					ObjList [curMagPos] [1] = num2str ((XMicronsFromHome - startVal)/((XEVFull - XSVFULL)*0.8))					button setXbutton win = Calibrate_Objectives, fcolor = (0,0, 0), title = "Start X by Stage", userdata = ""				else					NVAR YEVFull = root:packages:twoP:st:YEVFull					NVAR YSVFull = root:packages:twoP:st:YSVFull					ObjList [curMagPos] [2] = num2str ((YMicronsFromHome - startVal)/((YEVFull - YSVFULL)*0.8))					button setYbutton win = Calibrate_Objectives, fcolor = (0,0, 0), title = "Start Y by Stage", userdata = ""				endif			endif					break	endswitch	return 0EndFunction St_stagePanel(ba) : ButtonControl	STRUCT WMButtonAction &ba	switch( ba.eventCode )		case 2: // mouse up				SVAR stageProc = root:packages:twoP:st:stage				funcref GUIPProtofuncS stagePanel = $stageProc + "_OpenstagePanel"				stagePanel ("")			break	endswitch	return 0End